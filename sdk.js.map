{"version":3,"sources":["sdk.js","services/Resource.js","module.js","directives/ExampleDirective.js","resources/Advertisement.js","resources/ContactMessage.js","resources/CustomerProduct.js","resources/Entertainer.js","resources/Event.js","resources/Medium.js","resources/Order.js","resources/Page.js","resources/Post.js","resources/Product.js","resources/Promotion.js","resources/Seat.js","resources/Section.js","resources/Session.js","resources/Showtime.js","resources/Site.js","resources/Sku.js","resources/Subscriber.js","resources/Testimonial.js","resources/Ticket.js","resources/Tweet.js","resources/User.js","resources/Venue.js"],"names":["angular","pluralize","str","slice","substr","length","camelToSnake","replace","$1","toLowerCase","module","exports","value","config","$sceDelegateProvider","resourceUrlWhitelist","directive","factory","resource","R","token","url","method","modelName","FlexSiteAuth","create","params","include","interceptor","response","_response","accessToken","data","setUser","id","sessionId","session","rememberMe","save","deleteById","_response2","clearSession","clearStorage","confirm","signIn","signOut","destroyById","getCachedCurrent","currentSessionData","isAuthenticated","this","getCurrentId","currentSessionId","self","props","forEach","name","load","undefined","storage","key","propsPrefix","localStorage","sessionStorage","prototype","accessTokenId","sessionData","resetPassword","getCurrent","currentUserId","_response3","currentUserData","__isGetCurrentUser__","login","logout","updateOrCreate","upsert","update","updateAll","userId","userData","clearUser","provider","$get","$resource","apiBase","actions","urlBase","extend","exists","findById","find","isArray","findOne","count","action","withCredentials","removeById","$save","success","error","result","call","$promise","window"],"mappings":"CAAA,SAAAA,GACA,YC4CA,SAAAC,GAAAC,GAMA,MALA,QAAAA,EAAAC,MAAA,IACAD,EAAAA,EAAAE,OAAA,EAAAF,EAAAG,OAAA,GAAA,KAEAH,GAAA,IAEAA,EAGA,QAAAI,GAAAJ,GACA,MAAAA,GAAAK,QAAA,WAAA,SAAAC,GACA,MAAA,IAAAA,EAAAC,gBACAL,OAAA,GCzDA,mBAAAM,SAAA,mBAAAC,UAAAD,OAAAC,UAAAA,UACAD,OAAAC,QAAA,aAGAX,EAAAU,OAAA,aAAA,eACAE,MAAA,UAAA,mCACAA,MAAA,aAAA,iBACAC,QAAA,uBAAA,SAAAC,GACAA,EAAAC,sBACA,OACA,yBACA,0BACA,2BACA,4BACA,0BACA,gCCfAf,EAAAU,OAAA,aAAAM,UAAA,YAAA,eCAAhB,EAAAU,OAAA,aACAO,QAAA,oBAAA,mBAAA,SAAAC,GJaE,MIbFA,GAAA,mBCDAlB,EAAAU,OAAA,aACAO,QAAA,sBAAA,mBAAA,SAAAC,GLiBE,MKjBFA,GAAA,qBCDAlB,EAAAU,OAAA,aACAO,QAAA,uBAAA,mBAAA,SAAAC,GNqBE,MMrBFA,GAAA,sBCDAlB,EAAAU,OAAA,aACAO,QAAA,mBAAA,mBAAA,SAAAC,GPyBE,MOzBFA,GAAA,kBCDAlB,EAAAU,OAAA,aACAO,QAAA,aAAA,mBAAA,SAAAC,GR6BE,MQ7BFA,GAAA,YCDAlB,EAAAU,OAAA,aACAO,QAAA,cAAA,mBAAA,SAAAC,GTiCE,MSjCFA,GAAA,aCDAlB,EAAAU,OAAA,aACAO,QAAA,SAAA,mBAAA,SAAAC,GACA,GAAAC,GAAAD,EAAA,SACAE,OAAAC,IAAA,SAAAC,OAAA,QAGA,OADAH,GAAAI,UAAA,QACAJ,KCNAnB,EAAAU,OAAA,aACAO,QAAA,YAAA,mBAAA,SAAAC,GX6CE,MW7CFA,GAAA,WCDAlB,EAAAU,OAAA,aACAO,QAAA,YAAA,mBAAA,SAAAC,GZiDE,MYjDFA,GAAA,WCDAlB,EAAAU,OAAA,aACAO,QAAA,eAAA,mBAAA,SAAAC,GbqDE,MarDFA,GAAA,cCDAlB,EAAAU,OAAA,aACAO,QAAA,iBAAA,mBAAA,SAAAC,GdyDE,MczDFA,GAAA,gBCDAlB,EAAAU,OAAA,aACAO,QAAA,YAAA,mBAAA,SAAAC,Gf6DE,Me7DFA,GAAA,WCDAlB,EAAAU,OAAA,aACAO,QAAA,eAAA,mBAAA,SAAAC,GhBiEE,MgBjEFA,GAAA,cCDAlB,EAAAU,OAAA,aACAO,QAAA,WAAA,mBAAA,eAAA,SAAAC,EAAAM,GACA,GAAAL,GAAAD,EAAA,WACAO,QACAC,QAAAC,QAAA,WACAC,aACAC,SAAA,SAAAC,GACA,GAAAC,GAAAD,EAAAE,IAIA,OAHAR,GAAAS,QAAAF,EAAAG,GAAAH,EAAAI,UAAAJ,EAAAK,SACAZ,EAAAa,WAAAP,EAAAjB,OAAAa,OAAAW,cAAA,EACAb,EAAAc,OACAR,EAAAZ,WAEAG,IAAA,IAAAC,OAAA,QAEAiB,YACAX,aACAC,SAAA,SAAAW,GAGA,MAFAhB,GAAAiB,eACAjB,EAAAkB,eACAF,EAAAtB,WAEAG,IAAA,IAAAC,OAAA,UAEAqB,SACAtB,IAAA,WACAC,OAAA,QAkBA,OAdAH,GAAAyB,OAAAzB,EAAAM,OACAN,EAAA0B,QAAA1B,EAAA2B,YACA3B,EAAA4B,iBACA,WACA,GAAAf,GAAAR,EAAAwB,kBACA,OAAAhB,GAAA,GAAAb,GAAAa,GAAA,MAEAb,EAAA8B,gBAAA,WACA,MAAA,QAAAC,KAAAC,gBAEAhC,EAAAgC,aAAA,WACA,MAAA3B,GAAA4B,kBAEAjC,EAAAI,UAAA,UACAJ,KAEAF,QAAA,eAAA,WAIA,QAAAO,KACA,GAAA6B,GAAAH,IACAI,GAAAC,QAAA,SAAAC,GACAH,EAAAG,GAAAC,EAAAD,KAEAN,KAAAb,WAAAqB,OACAR,KAAAF,mBAAA,KA2BA,QAAAV,GAAAqB,EAAAH,EAAA5C,GACA,GAAAgD,GAAAC,EAAAL,CACA,QAAA5C,IAAAA,EAAA,IACA+C,EAAAC,GAAAhD,EAGA,QAAA6C,GAAAD,GACA,GAAAI,GAAAC,EAAAL,CACA,OAAAM,cAAAF,IAAAG,eAAAH,IAAA,KA5CA,GAAAN,IAAA,gBAAA,oBACAO,EAAA,YAkCA,OAvBArC,GAAAwC,UAAA1B,KAAA,WACA,GAAAe,GAAAH,KACAS,EAAAT,KAAAb,WAAAyB,aAAAC,cACAT,GAAAC,QAAA,SAAAC,GACAlB,EAAAqB,EAAAH,EAAAH,EAAAG,OAGAhC,EAAAwC,UAAA/B,QAAA,SAAAgC,EAAA9B,EAAA+B,GACAhB,KAAAe,cAAAA,EACAf,KAAAE,iBAAAjB,EACAe,KAAAF,mBAAAkB,GAEA1C,EAAAwC,UAAAvB,aAAA,WACAS,KAAAe,cAAA,KACAf,KAAAE,iBAAA,KACAF,KAAAF,mBAAA,MAEAxB,EAAAwC,UAAAtB,aAAA,WACAY,EAAAC,QAAA,SAAAC,GACAlB,EAAAyB,eAAAP,EAAA,MACAlB,EAAAwB,aAAAN,EAAA,SAGA,GAAAhC,KClFAxB,EAAAU,OAAA,aACAO,QAAA,gBAAA,mBAAA,SAAAC,GlBiKE,MkBjKFA,GAAA,eCDAlB,EAAAU,OAAA,aACAO,QAAA,YAAA,mBAAA,SAAAC,GnBqKE,MmBrKFA,GAAA,WCDAlB,EAAAU,OAAA,aACAO,QAAA,WAAA,mBAAA,SAAAC,GpByKE,MoBzKFA,GAAA,UCDAlB,EAAAU,OAAA,aACAO,QAAA,kBAAA,mBAAA,SAAAC,GrB6KE,MqB7KFA,GAAA,iBCDAlB,EAAAU,OAAA,aACAO,QAAA,mBAAA,mBAAA,SAAAC,GtBiLE,MsBjLFA,GAAA,kBCDAlB,EAAAU,OAAA,aACAO,QAAA,cAAA,mBAAA,SAAAC,GvBqLE,MuBrLFA,GAAA,aCDAlB,EAAAU,OAAA,aACAO,QAAA,aAAA,mBAAA,SAAAC,GxByLE,MwBzLFA,GAAA,YCDAlB,EAAAU,OAAA,aACAO,QAAA,QAAA,mBAAA,eAAA,SAAAC,EAAAM,GACA,GAAAL,GAAAD,EAAA,QACAiD,eAAA9C,IAAA,SAAAC,OAAA,QACA8C,YACA/C,IAAA,OAAAC,OAAA,MAAAI,QACAQ,GAAA,QAAAA,KACA,GAAAA,GAAAV,EAAA6C,aAEA,OADA,QAAAnC,IAAAA,EAAA,iBACAA,IAEAN,aACAC,SAAA,SAAAyC,GAEA,MADA9C,GAAA+C,gBAAAD,EAAAtC,KACAsC,EAAApD,WAEAsD,sBAAA,IAoBA,OAhBArD,GAAAyB,OAAAzB,EAAAsD,MACAtD,EAAA0B,QAAA1B,EAAAuD,OACAvD,EAAAwD,eAAAxD,EAAAyD,OACAzD,EAAA0D,OAAA1D,EAAA2D,UACA3D,EAAA4B,iBACA,WACA,GAAAf,GAAAR,EAAA+C,eACA,OAAAvC,GAAA,GAAAb,GAAAa,GAAA,MAEAb,EAAA8B,gBAAA,WACA,MAAA,QAAAC,KAAAC,gBAEAhC,EAAAgC,aAAA,WACA,MAAA3B,GAAA6C,eAEAlD,EAAAI,UAAA,OACAJ,KAEAF,QAAA,eAAA,WAIA,QAAAO,KACA,GAAA6B,GAAAH,IACAI,GAAAC,QAAA,SAAAC,GACAH,EAAAG,GAAAC,EAAAD,KAEAN,KAAAb,WAAAqB,OACAR,KAAAqB,gBAAA,KA2BA,QAAAjC,GAAAqB,EAAAH,EAAA5C,GACA,GAAAgD,GAAAC,EAAAL,CACA,QAAA5C,IAAAA,EAAA,IACA+C,EAAAC,GAAAhD,EAGA,QAAA6C,GAAAD,GACA,GAAAI,GAAAC,EAAAL,CACA,OAAAM,cAAAF,IAAAG,eAAAH,IAAA,KA5CA,GAAAN,IAAA,gBAAA,iBACAO,EAAA,YAkCA,OAvBArC,GAAAwC,UAAA1B,KAAA,WACA,GAAAe,GAAAH,KACAS,EAAAT,KAAAb,WAAAyB,aAAAC,cACAT,GAAAC,QAAA,SAAAC,GACAlB,EAAAqB,EAAAH,EAAAH,EAAAG,OAGAhC,EAAAwC,UAAA/B,QAAA,SAAAgC,EAAAc,EAAAC,GACA9B,KAAAe,cAAAA,EACAf,KAAAmB,cAAAU,EACA7B,KAAAqB,gBAAAS,GAEAxD,EAAAwC,UAAAiB,UAAA,WACA/B,KAAAe,cAAA,KACAf,KAAAmB,cAAA,KACAnB,KAAAqB,gBAAA,MAEA/C,EAAAwC,UAAAtB,aAAA,WACAY,EAAAC,QAAA,SAAAC,GACAlB,EAAAyB,eAAAP,EAAA,MACAlB,EAAAwB,aAAAN,EAAA,SAGA,GAAAhC,KC1EAxB,EAAAU,OAAA,aACAO,QAAA,aAAA,mBAAA,SAAAC,G1BiRE,M0BjRFA,GAAA,YAAAlB,EzBDAU,OAAA,aACAwE,SAAA,mBAAA,WACAhC,KAAAiC,MAAA,YAAA,UAAA,SAAAC,EAAAC,GACA,MAAA,UAAA7B,EAAA8B,GACA,GAAAjE,GAAA,IAAAf,EAAAL,EAAAuD,IACA+B,EAAAF,EAAAhE,EACAK,GAAAQ,GAAA,MAEAoD,GAAAtF,EAAAwF,WACA/D,QAAAH,OAAA,QACAsD,QAAAvD,IAAA,OAAAC,OAAA,OACAmE,QAAApE,IAAA,cAAAC,OAAA,OACAoE,UAAArE,IAAA,OAAAC,OAAA,OACAqE,MAAAC,SAAA,EAAAtE,OAAA,OACAuE,SAAAxE,IAAA,WAAAC,OAAA,OACAwD,WAAAzD,IAAA,UAAAC,OAAA,QACAiB,YAAAlB,IAAA,OAAAC,OAAA,UACAwE,OAAAzE,IAAA,SAAAC,OAAA,QACAgE,GAEAtF,EAAAuD,QAAA+B,EAAA,SAAAS,GACAA,EAAA1E,IAAA0E,EAAA1E,IAAAkE,EAAAQ,EAAA1E,IAAAkE,EACAQ,EAAAC,iBAAA,GAGA,IAAA9E,GAAAkE,EAAAG,EAAA,OAAA7D,EAAA4D,EAeA,OAfApE,GAGAyD,eAAAzD,EAAA0D,OACA1D,EAAA2D,OAAA3D,EAAA4D,UACA5D,EAAA4B,YAAA5B,EAAAqB,WACArB,EAAA+E,WAAA/E,EAAAqB,WACArB,EAAAK,UAAAiC,EACAtC,EAAA8C,UAAAzC,UAAAiC,EAAAtC,EAGA8C,UAAAkC,MAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAnF,EAAA0D,OAAA0B,KAAApD,QAAAA,KAAAiD,EAAAC,EACA,OAAAC,GAAAE,UAAAF,GAEAnF,QDiUEsF,OAAOxG","file":"sdk.js","sourcesContent":[null,"angular.module('FlexSites')\n  .provider('FlexSiteResource', function FlexSiteResourceProvider() {\n    this.$get = ['$resource', 'apiBase', function($resource, apiBase) {\n      return function(name, actions) {\n        var url = '/' + camelToSnake(pluralize(name))\n          , urlBase = apiBase + url\n          , params = {id: '@id'};\n\n        actions = angular.extend({}, {\n          create: {method: 'POST'},\n          upsert: {url: '/:id', method: 'PUT'},\n          exists: {url: '/:id/exists', method: 'GET'},\n          findById: {url: '/:id', method: 'GET'},\n          find: {isArray: true, method: 'GET'},\n          findOne: {url: '/findOne', method: 'GET'},\n          updateAll: {url: '/update', method: 'POST'},\n          deleteById: {url: '/:id', method: 'DELETE'},\n          count: {url: '/count', method: 'GET'},\n        }, actions);\n\n        angular.forEach(actions, function(action){\n          action.url = action.url ? urlBase + action.url : urlBase;\n          action.withCredentials = true;\n        });\n\n        var resource = $resource(urlBase + '/:id', params, actions);\n\n        // Method aliases\n        resource.updateOrCreate = resource.upsert;\n        resource.update = resource.updateAll;\n        resource.destroyById = resource.deleteById;\n        resource.removeById = resource.deleteById;\n        resource.modelName = name;\n        resource.prototype.modelName = name;\n\n        // Override prototype.$save\n        resource.prototype.$save = function(success, error) {\n          var result = resource.upsert.call(this, {}, this, success, error);\n          return result.$promise || result;\n        };\n        return resource;\n      };\n    }];\n  });\n\nfunction pluralize(str) {\n  if (str.slice(-3) === 'ium') {\n    str = str.substr(0, str.length - 3) + 'ia';\n  } else {\n    str += 's';\n  }\n  return str;\n}\n\nfunction camelToSnake(str) {\n  return str.replace(/([A-Z])/g, function($1){\n    return '-' + $1.toLowerCase();\n  }).substr(1);\n}\n","if (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports){\n  module.exports = 'FlexSites';\n}\n\nangular.module('FlexSites', ['ngResource'])\n  .value('apiBase', 'https://api.flexsites.io/api/v1')\n  .value('authHeader', 'authorization')\n  .config(['$sceDelegateProvider', function($sceDelegateProvider) {\n    $sceDelegateProvider.resourceUrlWhitelist([\n      'self',\n      'http://*.flexhub.io/**',\n      'https://*.flexhub.io/**',\n      'http://*.flexsites.io/**',\n      'https://*.flexsites.io/**',\n      'http://*.youtube.com/**',\n      'https://*.youtube.com/**',\n    ]);\n  }]);\n","angular.module('FlexSites').directive('flexForm', [ function() {\n\n}]);\n","angular.module('FlexSites')\n  .factory('FlexAdverisement', ['FlexSiteResource', (resource) => resource('Adverisement')]);\n","angular.module('FlexSites')\n  .factory('FlexContactMessage', ['FlexSiteResource', (resource) => resource('ContactMessage')]);\n","angular.module('FlexSites')\n  .factory('FlexCustomerProduct', ['FlexSiteResource', (resource) => resource('CustomerProduct')]);\n","angular.module('FlexSites')\n  .factory('FlexEntertainer', ['FlexSiteResource', resource => resource('Entertainer')]);\n","angular.module('FlexSites')\n  .factory('FlexEvent', ['FlexSiteResource', resource => resource('Event')]);\n","angular.module('FlexSites')\n  .factory('FlexMedium', ['FlexSiteResource', resource => resource('Medium')]);\n","angular.module('FlexSites')\n  .factory('Order', ['FlexSiteResource', resource => {\n    var R = resource('Order', {\n      token: { url: '/token', method: 'GET' },\n    });\n    R.modelName = 'Order';\n    return R;\n  }]);\n","angular.module('FlexSites')\n  .factory('FlexPage', ['FlexSiteResource', resource => resource('Page')]);\n","angular.module('FlexSites')\n  .factory('FlexPost', ['FlexSiteResource', resource => resource('Post')]);\n","angular.module('FlexSites')\n  .factory('FlexProduct', ['FlexSiteResource', resource => resource('Product')]);\n","angular.module('FlexSites')\n  .factory('FlexPromotion', ['FlexSiteResource', resource => resource('Promotion')]);\n","angular.module('FlexSites')\n  .factory('FlexSeat', ['FlexSiteResource', resource => resource('Seat')]);\n","angular.module('FlexSites')\n  .factory('FlexSection', ['FlexSiteResource', resource => resource('Section')]);\n","angular.module('FlexSites')\n  .factory('Session', ['FlexSiteResource', 'FlexSiteAuth', function(resource, FlexSiteAuth) {\n    var R = resource('Session', {\n      create: {\n        params: {include: 'session'},\n        interceptor: {\n          response: function(response) {\n            var accessToken = response.data;\n            FlexSiteAuth.setUser(accessToken.id, accessToken.sessionId, accessToken.session);\n            FlexSiteAuth.rememberMe = response.config.params.rememberMe !== false;\n            FlexSiteAuth.save();\n            return response.resource;\n          },\n        }, url: '/', method: 'POST',\n      },\n      deleteById: {\n        interceptor: {\n          response: function(response) {\n            FlexSiteAuth.clearSession();\n            FlexSiteAuth.clearStorage();\n            return response.resource;\n          },\n        }, url: '/', method: 'DELETE',\n      },\n      confirm: {\n        url: '/confirm',\n        method: 'GET',\n      },\n    });\n\n    R.signIn = R.create;\n    R.signOut = R.destroyById;\n    R.getCachedCurrent =\n      function() {\n        var data = FlexSiteAuth.currentSessionData;\n        return data ? new R(data) : null;\n      };\n    R.isAuthenticated = function() {\n      return this.getCurrentId() !== null;\n    };\n    R.getCurrentId = function() {\n      return FlexSiteAuth.currentSessionId;\n    };\n    R.modelName = 'Session';\n    return R;\n  }])\n  .factory('FlexSiteAuth', function() {\n    var props = ['accessTokenId', 'currentSessionId'];\n    var propsPrefix = '$FlexSite$';\n\n    function FlexSiteAuth() {\n      var self = this;\n      props.forEach(function(name) {\n        self[name] = load(name);\n      });\n      this.rememberMe = undefined;\n      this.currentSessionData = null;\n    }\n\n    FlexSiteAuth.prototype.save = function() {\n      var self = this;\n      var storage = this.rememberMe ? localStorage : sessionStorage;\n      props.forEach(function(name) {\n        save(storage, name, self[name]);\n      });\n    };\n    FlexSiteAuth.prototype.setUser = function(accessTokenId, sessionId, sessionData) {\n      this.accessTokenId = accessTokenId;\n      this.currentSessionId = sessionId;\n      this.currentSessionData = sessionData;\n    };\n    FlexSiteAuth.prototype.clearSession = function() {\n      this.accessTokenId = null;\n      this.currentSessionId = null;\n      this.currentSessionData = null;\n    };\n    FlexSiteAuth.prototype.clearStorage = function() {\n      props.forEach(function(name) {\n        save(sessionStorage, name, null);\n        save(localStorage, name, null);\n      });\n    };\n    return new FlexSiteAuth();\n    function save(storage, name, value) {\n      var key = propsPrefix + name;\n      if (value === null)value = '';\n      storage[key] = value;\n    }\n\n    function load(name) {\n      var key = propsPrefix + name;\n      return localStorage[key] || sessionStorage[key] || null;\n    }\n  });\n","angular.module('FlexSites')\n  .factory('FlexShowtime', ['FlexSiteResource', resource => resource('Showtime')]);\n","angular.module('FlexSites')\n  .factory('FlexSite', ['FlexSiteResource', resource => resource('Site')]);\n","angular.module('FlexSites')\n  .factory('FlexSKU', ['FlexSiteResource', resource => resource('SKU')]);\n","angular.module('FlexSites')\n  .factory('FlexSubscriber', ['FlexSiteResource', resource => resource('Subscriber')]);\n","angular.module('FlexSites')\n  .factory('FlexTestimonial', ['FlexSiteResource', resource => resource('Testimonial')]);\n","angular.module('FlexSites')\n  .factory('FlexTicket', ['FlexSiteResource', resource => resource('Ticket')]);\n","angular.module('FlexSites')\n  .factory('FlexTweet', ['FlexSiteResource', resource => resource('Tweet')]);\n","angular.module('FlexSites')\n  .factory('User', ['FlexSiteResource', 'FlexSiteAuth', function(resource, FlexSiteAuth) {\n    var R = resource('User', {\n      resetPassword: {url: '/reset', method: 'POST'},\n      getCurrent: {\n        url: '/:id', method: 'GET', params: {\n          id: function() {\n            var id = FlexSiteAuth.currentUserId;\n            if (id === null)id = '__anonymous__';\n            return id;\n          },\n        }, interceptor: {\n          response: function(response) {\n            FlexSiteAuth.currentUserData = response.data;\n            return response.resource;\n          },\n        }, __isGetCurrentUser__: true,\n      },\n    });\n\n    R.signIn = R.login;\n    R.signOut = R.logout;\n    R.updateOrCreate = R.upsert;\n    R.update = R.updateAll;\n    R.getCachedCurrent =\n      function() {\n        var data = FlexSiteAuth.currentUserData;\n        return data ? new R(data) : null;\n      };\n    R.isAuthenticated = function() {\n      return this.getCurrentId() !== null;\n    };\n    R.getCurrentId = function() {\n      return FlexSiteAuth.currentUserId;\n    };\n    R.modelName = 'User';\n    return R;\n  }])\n  .factory('FlexSiteAuth', function() {\n    var props = ['accessTokenId', 'currentUserId'];\n    var propsPrefix = '$FlexSite$';\n\n    function FlexSiteAuth() {\n      var self = this;\n      props.forEach(function(name) {\n        self[name] = load(name);\n      });\n      this.rememberMe = undefined;\n      this.currentUserData = null;\n    }\n\n    FlexSiteAuth.prototype.save = function() {\n      var self = this;\n      var storage = this.rememberMe ? localStorage : sessionStorage;\n      props.forEach(function(name) {\n        save(storage, name, self[name]);\n      });\n    };\n    FlexSiteAuth.prototype.setUser = function(accessTokenId, userId, userData) {\n      this.accessTokenId = accessTokenId;\n      this.currentUserId = userId;\n      this.currentUserData = userData;\n    };\n    FlexSiteAuth.prototype.clearUser = function() {\n      this.accessTokenId = null;\n      this.currentUserId = null;\n      this.currentUserData = null;\n    };\n    FlexSiteAuth.prototype.clearStorage = function() {\n      props.forEach(function(name) {\n        save(sessionStorage, name, null);\n        save(localStorage, name, null);\n      });\n    };\n    return new FlexSiteAuth();\n    function save(storage, name, value) {\n      var key = propsPrefix + name;\n      if (value === null)value = '';\n      storage[key] = value;\n    }\n\n    function load(name) {\n      var key = propsPrefix + name;\n      return localStorage[key] || sessionStorage[key] || null;\n    }\n  });\n","angular.module('FlexSites')\n  .factory('FlexVenue', ['FlexSiteResource', resource => resource('Venue')]);\n"],"sourceRoot":"/source/"}